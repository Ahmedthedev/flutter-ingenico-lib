// Autogenerated from Pigeon (v0.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/services.dart';

class SessionRequest {
  String? clientSessionId;
  String? customerId;
  String? clientApiUrl;
  String? assetBaseUrl;
  bool? environmentIsProduction;
  String? applicationIdentifier;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['clientSessionId'] = clientSessionId;
    pigeonMap['customerId'] = customerId;
    pigeonMap['clientApiUrl'] = clientApiUrl;
    pigeonMap['assetBaseUrl'] = assetBaseUrl;
    pigeonMap['environmentIsProduction'] = environmentIsProduction;
    pigeonMap['applicationIdentifier'] = applicationIdentifier;
    return pigeonMap;
  }

  static SessionRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return SessionRequest()
      ..clientSessionId = pigeonMap['clientSessionId'] as String?
      ..customerId = pigeonMap['customerId'] as String?
      ..clientApiUrl = pigeonMap['clientApiUrl'] as String?
      ..assetBaseUrl = pigeonMap['assetBaseUrl'] as String?
      ..environmentIsProduction = pigeonMap['environmentIsProduction'] as bool?
      ..applicationIdentifier = pigeonMap['applicationIdentifier'] as String?;
  }
}

class Session {
  String? sessionId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['sessionId'] = sessionId;
    return pigeonMap;
  }

  static Session decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return Session()
      ..sessionId = pigeonMap['sessionId'] as String?;
  }
}

class PaymentContextRequest {
  double? amountValue;
  String? currencyCode;
  String? countryCode;
  bool? isRecurring;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['amountValue'] = amountValue;
    pigeonMap['currencyCode'] = currencyCode;
    pigeonMap['countryCode'] = countryCode;
    pigeonMap['isRecurring'] = isRecurring;
    return pigeonMap;
  }

  static PaymentContextRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PaymentContextRequest()
      ..amountValue = pigeonMap['amountValue'] as double?
      ..currencyCode = pigeonMap['currencyCode'] as String?
      ..countryCode = pigeonMap['countryCode'] as String?
      ..isRecurring = pigeonMap['isRecurring'] as bool?;
  }
}

class Api {
  /// Constructor for [Api].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  Api({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  Future<Session> initClientSession(SessionRequest arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.Api.initClientSession', const StandardMessageCodec(), binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return Session.decode(replyMap['result']!);
    }
  }

  Future<List<BasicPaymentItem>> getBasicPaymentItems(PaymentContextRequest arg) async {
    final Object encoded = arg.encode();
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.Api.getBasicPaymentItems', const StandardMessageCodec(), binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(encoded) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return List<BasicPaymentItem>.decode(replyMap['result']!);
    }
  }
}
