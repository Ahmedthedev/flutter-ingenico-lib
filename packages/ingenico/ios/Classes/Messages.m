// Autogenerated from Pigeon (v0.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "Messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString*, id>* wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface SessionRequest ()
+(SessionRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface Session ()
+(Session*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface PaymentContextRequest ()
+(PaymentContextRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation SessionRequest
+(SessionRequest*)fromMap:(NSDictionary*)dict {
  SessionRequest* result = [[SessionRequest alloc] init];
  result.clientSessionId = dict[@"clientSessionId"];
  if ((NSNull *)result.clientSessionId == [NSNull null]) {
    result.clientSessionId = nil;
  }
  result.customerId = dict[@"customerId"];
  if ((NSNull *)result.customerId == [NSNull null]) {
    result.customerId = nil;
  }
  result.clientApiUrl = dict[@"clientApiUrl"];
  if ((NSNull *)result.clientApiUrl == [NSNull null]) {
    result.clientApiUrl = nil;
  }
  result.assetBaseUrl = dict[@"assetBaseUrl"];
  if ((NSNull *)result.assetBaseUrl == [NSNull null]) {
    result.assetBaseUrl = nil;
  }
  result.environmentIsProduction = dict[@"environmentIsProduction"];
  if ((NSNull *)result.environmentIsProduction == [NSNull null]) {
    result.environmentIsProduction = nil;
  }
  result.applicationIdentifier = dict[@"applicationIdentifier"];
  if ((NSNull *)result.applicationIdentifier == [NSNull null]) {
    result.applicationIdentifier = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.clientSessionId ? self.clientSessionId : [NSNull null]), @"clientSessionId", (self.customerId ? self.customerId : [NSNull null]), @"customerId", (self.clientApiUrl ? self.clientApiUrl : [NSNull null]), @"clientApiUrl", (self.assetBaseUrl ? self.assetBaseUrl : [NSNull null]), @"assetBaseUrl", (self.environmentIsProduction ? self.environmentIsProduction : [NSNull null]), @"environmentIsProduction", (self.applicationIdentifier ? self.applicationIdentifier : [NSNull null]), @"applicationIdentifier", nil];
}
@end

@implementation Session
+(Session*)fromMap:(NSDictionary*)dict {
  Session* result = [[Session alloc] init];
  result.sessionId = dict[@"sessionId"];
  if ((NSNull *)result.sessionId == [NSNull null]) {
    result.sessionId = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.sessionId ? self.sessionId : [NSNull null]), @"sessionId", nil];
}
@end

@implementation PaymentContextRequest
+(PaymentContextRequest*)fromMap:(NSDictionary*)dict {
  PaymentContextRequest* result = [[PaymentContextRequest alloc] init];
  result.amountValue = dict[@"amountValue"];
  if ((NSNull *)result.amountValue == [NSNull null]) {
    result.amountValue = nil;
  }
  result.currencyCode = dict[@"currencyCode"];
  if ((NSNull *)result.currencyCode == [NSNull null]) {
    result.currencyCode = nil;
  }
  result.countryCode = dict[@"countryCode"];
  if ((NSNull *)result.countryCode == [NSNull null]) {
    result.countryCode = nil;
  }
  result.isRecurring = dict[@"isRecurring"];
  if ((NSNull *)result.isRecurring == [NSNull null]) {
    result.isRecurring = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.amountValue ? self.amountValue : [NSNull null]), @"amountValue", (self.currencyCode ? self.currencyCode : [NSNull null]), @"currencyCode", (self.countryCode ? self.countryCode : [NSNull null]), @"countryCode", (self.isRecurring ? self.isRecurring : [NSNull null]), @"isRecurring", nil];
}
@end

void ApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<Api> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.initClientSession"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        SessionRequest *input = [SessionRequest fromMap:message];
        FlutterError *error;
        Session *output = [api initClientSession:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.getBasicPaymentItems"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        PaymentContextRequest *input = [PaymentContextRequest fromMap:message];
        FlutterError *error;
        List<BasicPaymentItem> *output = [api getBasicPaymentItems:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
