// Autogenerated from Pigeon (v0.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "Messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString*, id>* wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface SessionRequest ()
+(SessionRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface SessionResponse ()
+(SessionResponse*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface PaymentContextRequest ()
+(PaymentContextRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface GetPaymentProductRequest ()
+(GetPaymentProductRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface PaymentContextResponse ()
+(PaymentContextResponse*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface DisplayHintsPaymentItem ()
+(DisplayHintsPaymentItem*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface PaymentProduct ()
+(PaymentProduct*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface PaymentRequest ()
+(PaymentRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface PreparedPaymentRequest ()
+(PreparedPaymentRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation SessionRequest
+(SessionRequest*)fromMap:(NSDictionary*)dict {
  SessionRequest* result = [[SessionRequest alloc] init];
  result.clientSessionId = dict[@"clientSessionId"];
  if ((NSNull *)result.clientSessionId == [NSNull null]) {
    result.clientSessionId = nil;
  }
  result.customerId = dict[@"customerId"];
  if ((NSNull *)result.customerId == [NSNull null]) {
    result.customerId = nil;
  }
  result.clientApiUrl = dict[@"clientApiUrl"];
  if ((NSNull *)result.clientApiUrl == [NSNull null]) {
    result.clientApiUrl = nil;
  }
  result.assetBaseUrl = dict[@"assetBaseUrl"];
  if ((NSNull *)result.assetBaseUrl == [NSNull null]) {
    result.assetBaseUrl = nil;
  }
  result.environmentIsProduction = dict[@"environmentIsProduction"];
  if ((NSNull *)result.environmentIsProduction == [NSNull null]) {
    result.environmentIsProduction = nil;
  }
  result.applicationIdentifier = dict[@"applicationIdentifier"];
  if ((NSNull *)result.applicationIdentifier == [NSNull null]) {
    result.applicationIdentifier = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.clientSessionId ? self.clientSessionId : [NSNull null]), @"clientSessionId", (self.customerId ? self.customerId : [NSNull null]), @"customerId", (self.clientApiUrl ? self.clientApiUrl : [NSNull null]), @"clientApiUrl", (self.assetBaseUrl ? self.assetBaseUrl : [NSNull null]), @"assetBaseUrl", (self.environmentIsProduction ? self.environmentIsProduction : [NSNull null]), @"environmentIsProduction", (self.applicationIdentifier ? self.applicationIdentifier : [NSNull null]), @"applicationIdentifier", nil];
}
@end

@implementation SessionResponse
+(SessionResponse*)fromMap:(NSDictionary*)dict {
  SessionResponse* result = [[SessionResponse alloc] init];
  result.sessionId = dict[@"sessionId"];
  if ((NSNull *)result.sessionId == [NSNull null]) {
    result.sessionId = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.sessionId ? self.sessionId : [NSNull null]), @"sessionId", nil];
}
@end

@implementation PaymentContextRequest
+(PaymentContextRequest*)fromMap:(NSDictionary*)dict {
  PaymentContextRequest* result = [[PaymentContextRequest alloc] init];
  result.sessionId = dict[@"sessionId"];
  if ((NSNull *)result.sessionId == [NSNull null]) {
    result.sessionId = nil;
  }
  result.amountValue = dict[@"amountValue"];
  if ((NSNull *)result.amountValue == [NSNull null]) {
    result.amountValue = nil;
  }
  result.currencyCode = dict[@"currencyCode"];
  if ((NSNull *)result.currencyCode == [NSNull null]) {
    result.currencyCode = nil;
  }
  result.countryCode = dict[@"countryCode"];
  if ((NSNull *)result.countryCode == [NSNull null]) {
    result.countryCode = nil;
  }
  result.isRecurring = dict[@"isRecurring"];
  if ((NSNull *)result.isRecurring == [NSNull null]) {
    result.isRecurring = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.sessionId ? self.sessionId : [NSNull null]), @"sessionId", (self.amountValue ? self.amountValue : [NSNull null]), @"amountValue", (self.currencyCode ? self.currencyCode : [NSNull null]), @"currencyCode", (self.countryCode ? self.countryCode : [NSNull null]), @"countryCode", (self.isRecurring ? self.isRecurring : [NSNull null]), @"isRecurring", nil];
}
@end

@implementation GetPaymentProductRequest
+(GetPaymentProductRequest*)fromMap:(NSDictionary*)dict {
  GetPaymentProductRequest* result = [[GetPaymentProductRequest alloc] init];
  result.sessionId = dict[@"sessionId"];
  if ((NSNull *)result.sessionId == [NSNull null]) {
    result.sessionId = nil;
  }
  result.paymentProductId = dict[@"paymentProductId"];
  if ((NSNull *)result.paymentProductId == [NSNull null]) {
    result.paymentProductId = nil;
  }
  result.amountValue = dict[@"amountValue"];
  if ((NSNull *)result.amountValue == [NSNull null]) {
    result.amountValue = nil;
  }
  result.currencyCode = dict[@"currencyCode"];
  if ((NSNull *)result.currencyCode == [NSNull null]) {
    result.currencyCode = nil;
  }
  result.countryCode = dict[@"countryCode"];
  if ((NSNull *)result.countryCode == [NSNull null]) {
    result.countryCode = nil;
  }
  result.isRecurring = dict[@"isRecurring"];
  if ((NSNull *)result.isRecurring == [NSNull null]) {
    result.isRecurring = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.sessionId ? self.sessionId : [NSNull null]), @"sessionId", (self.paymentProductId ? self.paymentProductId : [NSNull null]), @"paymentProductId", (self.amountValue ? self.amountValue : [NSNull null]), @"amountValue", (self.currencyCode ? self.currencyCode : [NSNull null]), @"currencyCode", (self.countryCode ? self.countryCode : [NSNull null]), @"countryCode", (self.isRecurring ? self.isRecurring : [NSNull null]), @"isRecurring", nil];
}
@end

@implementation PaymentContextResponse
+(PaymentContextResponse*)fromMap:(NSDictionary*)dict {
  PaymentContextResponse* result = [[PaymentContextResponse alloc] init];
  result.basicPaymentProduct = dict[@"basicPaymentProduct"];
  if ((NSNull *)result.basicPaymentProduct == [NSNull null]) {
    result.basicPaymentProduct = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.basicPaymentProduct ? self.basicPaymentProduct : [NSNull null]), @"basicPaymentProduct", nil];
}
@end

@implementation DisplayHintsPaymentItem
+(DisplayHintsPaymentItem*)fromMap:(NSDictionary*)dict {
  DisplayHintsPaymentItem* result = [[DisplayHintsPaymentItem alloc] init];
  result.displayOrder = dict[@"displayOrder"];
  if ((NSNull *)result.displayOrder == [NSNull null]) {
    result.displayOrder = nil;
  }
  result.label = dict[@"label"];
  if ((NSNull *)result.label == [NSNull null]) {
    result.label = nil;
  }
  result.logoUrl = dict[@"logoUrl"];
  if ((NSNull *)result.logoUrl == [NSNull null]) {
    result.logoUrl = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.displayOrder ? self.displayOrder : [NSNull null]), @"displayOrder", (self.label ? self.label : [NSNull null]), @"label", (self.logoUrl ? self.logoUrl : [NSNull null]), @"logoUrl", nil];
}
@end

@implementation PaymentProduct
+(PaymentProduct*)fromMap:(NSDictionary*)dict {
  PaymentProduct* result = [[PaymentProduct alloc] init];
  result.id = dict[@"id"];
  if ((NSNull *)result.id == [NSNull null]) {
    result.id = nil;
  }
  result.paymentMethod = dict[@"paymentMethod"];
  if ((NSNull *)result.paymentMethod == [NSNull null]) {
    result.paymentMethod = nil;
  }
  result.paymentProductGroup = dict[@"paymentProductGroup"];
  if ((NSNull *)result.paymentProductGroup == [NSNull null]) {
    result.paymentProductGroup = nil;
  }
  result.minAmount = dict[@"minAmount"];
  if ((NSNull *)result.minAmount == [NSNull null]) {
    result.minAmount = nil;
  }
  result.maxAmount = dict[@"maxAmount"];
  if ((NSNull *)result.maxAmount == [NSNull null]) {
    result.maxAmount = nil;
  }
  result.allowsRecurring = dict[@"allowsRecurring"];
  if ((NSNull *)result.allowsRecurring == [NSNull null]) {
    result.allowsRecurring = nil;
  }
  result.allowsTokenization = dict[@"allowsTokenization"];
  if ((NSNull *)result.allowsTokenization == [NSNull null]) {
    result.allowsTokenization = nil;
  }
  result.usesRedirectionTo3rdParty = dict[@"usesRedirectionTo3rdParty"];
  if ((NSNull *)result.usesRedirectionTo3rdParty == [NSNull null]) {
    result.usesRedirectionTo3rdParty = nil;
  }
  result.displayHints = [DisplayHintsPaymentItem fromMap:dict[@"displayHints"]];
  if ((NSNull *)result.displayHints == [NSNull null]) {
    result.displayHints = nil;
  }
  result.fields = dict[@"fields"];
  if ((NSNull *)result.fields == [NSNull null]) {
    result.fields = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.id ? self.id : [NSNull null]), @"id", (self.paymentMethod ? self.paymentMethod : [NSNull null]), @"paymentMethod", (self.paymentProductGroup ? self.paymentProductGroup : [NSNull null]), @"paymentProductGroup", (self.minAmount ? self.minAmount : [NSNull null]), @"minAmount", (self.maxAmount ? self.maxAmount : [NSNull null]), @"maxAmount", (self.allowsRecurring ? self.allowsRecurring : [NSNull null]), @"allowsRecurring", (self.allowsTokenization ? self.allowsTokenization : [NSNull null]), @"allowsTokenization", (self.usesRedirectionTo3rdParty ? self.usesRedirectionTo3rdParty : [NSNull null]), @"usesRedirectionTo3rdParty", (self.displayHints ? [self.displayHints toMap] : [NSNull null]), @"displayHints", (self.fields ? self.fields : [NSNull null]), @"fields", nil];
}
@end

@implementation PaymentRequest
+(PaymentRequest*)fromMap:(NSDictionary*)dict {
  PaymentRequest* result = [[PaymentRequest alloc] init];
  result.values = dict[@"values"];
  if ((NSNull *)result.values == [NSNull null]) {
    result.values = nil;
  }
  result.paymentProductId = dict[@"paymentProductId"];
  if ((NSNull *)result.paymentProductId == [NSNull null]) {
    result.paymentProductId = nil;
  }
  result.tokenize = dict[@"tokenize"];
  if ((NSNull *)result.tokenize == [NSNull null]) {
    result.tokenize = nil;
  }
  result.sessionId = dict[@"sessionId"];
  if ((NSNull *)result.sessionId == [NSNull null]) {
    result.sessionId = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.values ? self.values : [NSNull null]), @"values", (self.paymentProductId ? self.paymentProductId : [NSNull null]), @"paymentProductId", (self.tokenize ? self.tokenize : [NSNull null]), @"tokenize", (self.sessionId ? self.sessionId : [NSNull null]), @"sessionId", nil];
}
@end

@implementation PreparedPaymentRequest
+(PreparedPaymentRequest*)fromMap:(NSDictionary*)dict {
  PreparedPaymentRequest* result = [[PreparedPaymentRequest alloc] init];
  result.encryptedFields = dict[@"encryptedFields"];
  if ((NSNull *)result.encryptedFields == [NSNull null]) {
    result.encryptedFields = nil;
  }
  result.encodedClientMetaInfo = dict[@"encodedClientMetaInfo"];
  if ((NSNull *)result.encodedClientMetaInfo == [NSNull null]) {
    result.encodedClientMetaInfo = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.encryptedFields ? self.encryptedFields : [NSNull null]), @"encryptedFields", (self.encodedClientMetaInfo ? self.encodedClientMetaInfo : [NSNull null]), @"encodedClientMetaInfo", nil];
}
@end

@interface ApiCodecReader : FlutterStandardReader
@end
@implementation ApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 127:     
      return [GetPaymentProductRequest fromMap:[self readValue]];
    
    case 126:     
      return [PaymentContextRequest fromMap:[self readValue]];
    
    case 125:     
      return [PaymentContextResponse fromMap:[self readValue]];
    
    case 124:     
      return [PaymentProduct fromMap:[self readValue]];
    
    case 123:     
      return [PaymentRequest fromMap:[self readValue]];
    
    case 122:     
      return [PreparedPaymentRequest fromMap:[self readValue]];
    
    case 121:     
      return [SessionRequest fromMap:[self readValue]];
    
    case 120:     
      return [SessionResponse fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface ApiCodecWriter : FlutterStandardWriter
@end
@implementation ApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[GetPaymentProductRequest class]]) {
    [self writeByte:127];
    [self writeValue:[value toMap]];
  }
  else if ([value isKindOfClass:[PaymentContextRequest class]]) {
    [self writeByte:126];
    [self writeValue:[value toMap]];
  }
  else if ([value isKindOfClass:[PaymentContextResponse class]]) {
    [self writeByte:125];
    [self writeValue:[value toMap]];
  }
  else if ([value isKindOfClass:[PaymentProduct class]]) {
    [self writeByte:124];
    [self writeValue:[value toMap]];
  }
  else if ([value isKindOfClass:[PaymentRequest class]]) {
    [self writeByte:123];
    [self writeValue:[value toMap]];
  }
  else if ([value isKindOfClass:[PreparedPaymentRequest class]]) {
    [self writeByte:122];
    [self writeValue:[value toMap]];
  }
  else if ([value isKindOfClass:[SessionRequest class]]) {
    [self writeByte:121];
    [self writeValue:[value toMap]];
  }
  else if ([value isKindOfClass:[SessionResponse class]]) {
    [self writeByte:120];
    [self writeValue:[value toMap]];
  }
  else {
    [super writeValue:value];
  }
}
@end

@interface ApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ApiCodecReaderWriter
- (FlutterStandardWriter*)writerWithData:(NSMutableData*)data {
  return [[ApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader*)readerWithData:(NSData*)data {
  return [[ApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec>* ApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec* s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    ApiCodecReaderWriter* readerWriter = [[ApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void ApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<Api> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.initClientSession"
        binaryMessenger:binaryMessenger
        codec:ApiGetCodec()];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        SessionRequest *input = [SessionRequest fromMap:message];
        FlutterError *error;
        SessionResponse *output = [api initClientSession:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.getBasicPaymentItems"
        binaryMessenger:binaryMessenger
        codec:ApiGetCodec()];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        PaymentContextRequest *input = [PaymentContextRequest fromMap:message];
        [api getBasicPaymentItems:input completion:^(PaymentContextResponse *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult([output toMap], error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.getPaymentProduct"
        binaryMessenger:binaryMessenger
        codec:ApiGetCodec()];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        GetPaymentProductRequest *input = [GetPaymentProductRequest fromMap:message];
        [api getPaymentProduct:input completion:^(PaymentProduct *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult([output toMap], error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.preparePaymentRequest"
        binaryMessenger:binaryMessenger
        codec:ApiGetCodec()];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        PaymentRequest *input = [PaymentRequest fromMap:message];
        [api preparePaymentRequest:input completion:^(PreparedPaymentRequest *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult([output toMap], error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
