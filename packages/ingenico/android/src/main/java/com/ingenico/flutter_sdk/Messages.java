// Autogenerated from Pigeon (v0.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.ingenico.flutter_sdk;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SessionRequest {
    private String clientSessionId;
    public String getClientSessionId() { return clientSessionId; }
    public void setClientSessionId(String setterArg) { this.clientSessionId = setterArg; }

    private String customerId;
    public String getCustomerId() { return customerId; }
    public void setCustomerId(String setterArg) { this.customerId = setterArg; }

    private String clientApiUrl;
    public String getClientApiUrl() { return clientApiUrl; }
    public void setClientApiUrl(String setterArg) { this.clientApiUrl = setterArg; }

    private String assetBaseUrl;
    public String getAssetBaseUrl() { return assetBaseUrl; }
    public void setAssetBaseUrl(String setterArg) { this.assetBaseUrl = setterArg; }

    private Boolean environmentIsProduction;
    public Boolean getEnvironmentIsProduction() { return environmentIsProduction; }
    public void setEnvironmentIsProduction(Boolean setterArg) { this.environmentIsProduction = setterArg; }

    private String applicationIdentifier;
    public String getApplicationIdentifier() { return applicationIdentifier; }
    public void setApplicationIdentifier(String setterArg) { this.applicationIdentifier = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("clientSessionId", clientSessionId);
      toMapResult.put("customerId", customerId);
      toMapResult.put("clientApiUrl", clientApiUrl);
      toMapResult.put("assetBaseUrl", assetBaseUrl);
      toMapResult.put("environmentIsProduction", environmentIsProduction);
      toMapResult.put("applicationIdentifier", applicationIdentifier);
      return toMapResult;
    }
    static SessionRequest fromMap(Map<String, Object> map) {
      SessionRequest fromMapResult = new SessionRequest();
      Object clientSessionId = map.get("clientSessionId");
      fromMapResult.clientSessionId = (String)clientSessionId;
      Object customerId = map.get("customerId");
      fromMapResult.customerId = (String)customerId;
      Object clientApiUrl = map.get("clientApiUrl");
      fromMapResult.clientApiUrl = (String)clientApiUrl;
      Object assetBaseUrl = map.get("assetBaseUrl");
      fromMapResult.assetBaseUrl = (String)assetBaseUrl;
      Object environmentIsProduction = map.get("environmentIsProduction");
      fromMapResult.environmentIsProduction = (Boolean)environmentIsProduction;
      Object applicationIdentifier = map.get("applicationIdentifier");
      fromMapResult.applicationIdentifier = (String)applicationIdentifier;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SessionResponse {
    private String sessionId;
    public String getSessionId() { return sessionId; }
    public void setSessionId(String setterArg) { this.sessionId = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("sessionId", sessionId);
      return toMapResult;
    }
    static SessionResponse fromMap(Map<String, Object> map) {
      SessionResponse fromMapResult = new SessionResponse();
      Object sessionId = map.get("sessionId");
      fromMapResult.sessionId = (String)sessionId;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PaymentContextRequest {
    private String sessionId;
    public String getSessionId() { return sessionId; }
    public void setSessionId(String setterArg) { this.sessionId = setterArg; }

    private Double amountValue;
    public Double getAmountValue() { return amountValue; }
    public void setAmountValue(Double setterArg) { this.amountValue = setterArg; }

    private String currencyCode;
    public String getCurrencyCode() { return currencyCode; }
    public void setCurrencyCode(String setterArg) { this.currencyCode = setterArg; }

    private String countryCode;
    public String getCountryCode() { return countryCode; }
    public void setCountryCode(String setterArg) { this.countryCode = setterArg; }

    private Boolean isRecurring;
    public Boolean getIsRecurring() { return isRecurring; }
    public void setIsRecurring(Boolean setterArg) { this.isRecurring = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("sessionId", sessionId);
      toMapResult.put("amountValue", amountValue);
      toMapResult.put("currencyCode", currencyCode);
      toMapResult.put("countryCode", countryCode);
      toMapResult.put("isRecurring", isRecurring);
      return toMapResult;
    }
    static PaymentContextRequest fromMap(Map<String, Object> map) {
      PaymentContextRequest fromMapResult = new PaymentContextRequest();
      Object sessionId = map.get("sessionId");
      fromMapResult.sessionId = (String)sessionId;
      Object amountValue = map.get("amountValue");
      fromMapResult.amountValue = (Double)amountValue;
      Object currencyCode = map.get("currencyCode");
      fromMapResult.currencyCode = (String)currencyCode;
      Object countryCode = map.get("countryCode");
      fromMapResult.countryCode = (String)countryCode;
      Object isRecurring = map.get("isRecurring");
      fromMapResult.isRecurring = (Boolean)isRecurring;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class GetPaymentProductRequest {
    private String sessionId;
    public String getSessionId() { return sessionId; }
    public void setSessionId(String setterArg) { this.sessionId = setterArg; }

    private String paymentProductId;
    public String getPaymentProductId() { return paymentProductId; }
    public void setPaymentProductId(String setterArg) { this.paymentProductId = setterArg; }

    private Double amountValue;
    public Double getAmountValue() { return amountValue; }
    public void setAmountValue(Double setterArg) { this.amountValue = setterArg; }

    private String currencyCode;
    public String getCurrencyCode() { return currencyCode; }
    public void setCurrencyCode(String setterArg) { this.currencyCode = setterArg; }

    private String countryCode;
    public String getCountryCode() { return countryCode; }
    public void setCountryCode(String setterArg) { this.countryCode = setterArg; }

    private Boolean isRecurring;
    public Boolean getIsRecurring() { return isRecurring; }
    public void setIsRecurring(Boolean setterArg) { this.isRecurring = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("sessionId", sessionId);
      toMapResult.put("paymentProductId", paymentProductId);
      toMapResult.put("amountValue", amountValue);
      toMapResult.put("currencyCode", currencyCode);
      toMapResult.put("countryCode", countryCode);
      toMapResult.put("isRecurring", isRecurring);
      return toMapResult;
    }
    static GetPaymentProductRequest fromMap(Map<String, Object> map) {
      GetPaymentProductRequest fromMapResult = new GetPaymentProductRequest();
      Object sessionId = map.get("sessionId");
      fromMapResult.sessionId = (String)sessionId;
      Object paymentProductId = map.get("paymentProductId");
      fromMapResult.paymentProductId = (String)paymentProductId;
      Object amountValue = map.get("amountValue");
      fromMapResult.amountValue = (Double)amountValue;
      Object currencyCode = map.get("currencyCode");
      fromMapResult.currencyCode = (String)currencyCode;
      Object countryCode = map.get("countryCode");
      fromMapResult.countryCode = (String)countryCode;
      Object isRecurring = map.get("isRecurring");
      fromMapResult.isRecurring = (Boolean)isRecurring;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PaymentContextResponse {
    private List<Object> basicPaymentProduct;
    public List<Object> getBasicPaymentProduct() { return basicPaymentProduct; }
    public void setBasicPaymentProduct(List<Object> setterArg) { this.basicPaymentProduct = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("basicPaymentProduct", basicPaymentProduct);
      return toMapResult;
    }
    static PaymentContextResponse fromMap(Map<String, Object> map) {
      PaymentContextResponse fromMapResult = new PaymentContextResponse();
      Object basicPaymentProduct = map.get("basicPaymentProduct");
      fromMapResult.basicPaymentProduct = (List<Object>)basicPaymentProduct;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PaymentProduct {
    private List<Object> fields;
    public List<Object> getFields() { return fields; }
    public void setFields(List<Object> setterArg) { this.fields = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("fields", fields);
      return toMapResult;
    }
    static PaymentProduct fromMap(Map<String, Object> map) {
      PaymentProduct fromMapResult = new PaymentProduct();
      Object fields = map.get("fields");
      fromMapResult.fields = (List<Object>)fields;
      return fromMapResult;
    }
  }

  public interface Result<T> {
    void success(T result);
  }
  private static class ApiCodec extends StandardMessageCodec {
    public static final ApiCodec INSTANCE = new ApiCodec();
    private ApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case 127:         
          return GetPaymentProductRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case 126:         
          return PaymentContextRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case 125:         
          return PaymentContextResponse.fromMap((Map<String, Object>) readValue(buffer));
        
        case 124:         
          return PaymentProduct.fromMap((Map<String, Object>) readValue(buffer));
        
        case 123:         
          return SessionRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case 122:         
          return SessionResponse.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof GetPaymentProductRequest) {
        stream.write(127);
        writeValue(stream, ((GetPaymentProductRequest) value).toMap());
      }
      else if (value instanceof PaymentContextRequest) {
        stream.write(126);
        writeValue(stream, ((PaymentContextRequest) value).toMap());
      }
      else if (value instanceof PaymentContextResponse) {
        stream.write(125);
        writeValue(stream, ((PaymentContextResponse) value).toMap());
      }
      else if (value instanceof PaymentProduct) {
        stream.write(124);
        writeValue(stream, ((PaymentProduct) value).toMap());
      }
      else if (value instanceof SessionRequest) {
        stream.write(123);
        writeValue(stream, ((SessionRequest) value).toMap());
      }
      else if (value instanceof SessionResponse) {
        stream.write(122);
        writeValue(stream, ((SessionResponse) value).toMap());
      }
      else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface Api {
    SessionResponse initClientSession(SessionRequest arg);
    void getBasicPaymentItems(PaymentContextRequest arg, Result<PaymentContextResponse> result);
    void getPaymentProduct(GetPaymentProductRequest arg, Result<PaymentProduct> result);

    /** The codec used by Api. */
    static MessageCodec<Object> getCodec() {
      return ApiCodec.INSTANCE;
    }

    /** Sets up an instance of `Api` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, Api api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Api.initClientSession", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              SessionRequest input = SessionRequest.fromMap((Map<String, Object>)message);
              SessionResponse output = api.initClientSession(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Api.getBasicPaymentItems", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              PaymentContextRequest input = PaymentContextRequest.fromMap((Map<String, Object>)message);
              api.getBasicPaymentItems(input, result -> { wrapped.put("result", result.toMap()); reply.reply(wrapped); });
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Api.getPaymentProduct", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              GetPaymentProductRequest input = GetPaymentProductRequest.fromMap((Map<String, Object>)message);
              api.getPaymentProduct(input, result -> { wrapped.put("result", result.toMap()); reply.reply(wrapped); });
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
